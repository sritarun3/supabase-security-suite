[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "supabase-security-suite"
version = "2.0.0"
description = "Comprehensive security scanner for self-hosted Supabase projects"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "Supabase Security Suite Contributors"}
]
keywords = ["supabase", "security", "scanner", "rls", "postgres", "vulnerability"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Topic :: Security",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "typer>=0.9.0",
    "rich>=13.0.0",
    "pydantic>=2.0.0",
    "asyncpg>=0.29.0",
    "aiohttp>=3.9.0",
    "httpx>=0.25.0",
    "flask>=3.0.0",
    "flask-cors>=4.0.0",
    "pyyaml>=6.0.0",
    "python-dotenv>=1.0.0",
    "pyjwt>=2.8.0",
    "pydantic-settings>=2.0.0",
    "requests>=2.31.0",
    "reportlab>=4.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
]
dashboard = [
    "flask>=3.0.0",
    "gunicorn>=21.0.0",
]
integrations = [
    "requests>=2.31.0",
    "slack-sdk>=3.0.0",
    "jira>=3.5.0",
]
all = [
    "supabase-security-suite[dev,dashboard,integrations]",
]

[project.urls]
Homepage = "https://github.com/your-org/supabase-security-suite"
Documentation = "https://github.com/your-org/supabase-security-suite#readme"
Repository = "https://github.com/your-org/supabase-security-suite"
"Bug Tracker" = "https://github.com/your-org/supabase-security-suite/issues"

[project.scripts]
suite = "supabase_security_suite.cli.main:app"
suite-dashboard = "supabase_security_suite.dashboard.server:main"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]
include = ["supabase_security_suite*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
supabase_security_suite = [
    "dashboard/templates/**/*",
    "dashboard/static/**/*",
    "scanners/semgrep_rules/**/*.yml",
]

[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py39"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=supabase_security_suite",
    "--cov-report=term-missing",
    "--cov-report=html",
]
asyncio_mode = "auto"

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
strict_optional = true

